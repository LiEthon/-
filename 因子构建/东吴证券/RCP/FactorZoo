from functools import lru_cache
import statsmodels.api as sm
from typing import Dict, Union
import numpy as np
import pandas as pd
import datetime
import glob
import os
import warnings
warnings.filterwarnings("ignore")

def read_multiple_csv(path, file_type):
    csv_files = glob.glob (os.path.join (path, '*.' + file_type))
    data_list = []
    for file in csv_files:
        data = pd.read_csv (file)
        file_name = os.path.basename(file)
        code = os.path.splitext(file_name)[0]
        code = code.split('_')[1]
        data['code'] = code
        #data['trade_dt'] = pd.to_datetime(data['trade_dt'])
        data = data.set_index('code')
        data['market_value'] = data['close']*data['amount']
        #data['trade_dt'] = data['trade_dt'].apply(lambda x: convert_time(x))
        #data['date'] = data['time'].dt.date
        data_list.append (data)
    data = pd.concat (data_list, ignore_index=False)
    return data

def check_data_cols(df: pd.DataFrame) -> None:
    """检查传入的数据是否具备计算因子所需的列

    Parameters
    ----------
    df : pd.DataFrame
        MultiIndex level0-date level1-code columns-close market_value 

    Raises
    ------
    ValueError
        如果不存在则报错
    """
    for col in ["close", 'market_value']:
        if col not in df.columns:
            raise ValueError(f"{col}不在df中!")

def calc_ols(x: pd.Series, y: pd.Series, method: str = 'resid') -> pd.Series:
    """计算回归
    Args：
        x(pd.Series):自变量
        y(pd.Series):因变量
    Returns:
        pd.Series：残差
    """
    x_masked = np.ma.masked_array(x, pd.isnull(x))
    y_masked = np.ma.masked_array(y, pd.isnull(y))
    result = sm.OLS(y.fillna(0), sm.add_constant(np.nan_to_num(x))).fit()
    filled_result = np.ma.filled(getattr(result, method), np.nan)
    result_series = pd.Series(filled_result, index=y.index)
    result_series.loc[pd.isnull(y)] = np.nan
    
    return result_series

def scaling_z_score(ser: pd.Series) -> pd.Series:
    """标准分
    Args：
        ser (pd.Series):因子值
        
    Returns:
        pd.Series：标准化后的因子
    """
    return (ser - ser.mean()) / ser.std()

def Culling_factor(factor_ser: pd.Series, other_factor: Union[pd.Series, pd.DataFrame],
                   scaling: bool = True) -> pd.Series:
    """计算剔除其他因子

    再各自横截面标准化，等权线性相加构建综合因子
    Args:
        factor_ser (pd.Series): 因子
        other_factor (pd.Series|pd.DataFrame): 其他因子
        scaling (bool):是否标准化
    Returns:
        pd.DataFrame: 结果
    """
    ser = calc_ols(other_factor, factor_ser, 'resid')
    
    if scaling:
        scaling_ser = scaling_z_score(ser)
    else:
        scaling_ser = ser
    
    return scaling_ser


class CP_factor(object):
    created_by = 'DataFrame'
    
    def __init__(
        self,
        data: pd.DataFrame,
    ) -> pd.DataFrame:
        #check_data_cols(data)
        self.data = data

    @lru_cache
    def _cal_daily_stats_(self):
        """计算日内统计指标
        
        Returns
        --------
        pd.DataFrame
            index-code, trade_dt columns-name values-stats
        """
        self.data['market_value'] = self.data['close']*self.data['amount']
        self.data['return'] = self.data.groupby(['code', 'trade_dt'])['close'].pct_change(fill_method = None)
        self.data['serial'] = self.data.groupby(['code', 'trade_dt']).cumcount() + 1
        
        ret_stat: pd.DataFrame = self.data.groupby(['code', 'trade_dt'])['return'].agg(['mean', 'std'])
        self.data = self.data.merge(ret_stat, on=['code', 'trade_dt'], how='left')
        self.data = self.data.reset_index()
        
        
    @lru_cache
    def _get_CP_intraday_(self) -> pd.DataFrame:
        """计算CP_intraday
        Returns:
        --------------
        pd.DataFrame
            index-date columns-code value-factor
        """
        self._cal_daily_stats_()
        #确定快速上涨/下跌区间
        self.data['fast_rise'] = self.data['return'] > self.data['mean'] + self.data['std']
        self.data['fast_drop'] = self.data['return'] < self.data['mean'] - self.data['std']
       
        fast_drop = self.data[self.data['fast_drop']]
        fast_drop_median = fast_drop.groupby(['code', 'trade_dt'])['serial'].median()
        fast_rise = self.data[self.data['fast_rise']]
        fast_rise_median = fast_rise.groupby(['code', 'trade_dt'])['serial'].median()
        cp_intra = fast_drop_median - fast_rise_median
        self.data = self.data.set_index(['code', 'trade_dt'])
        self.data['CP_Intraday'] = cp_intra
        #self.data['CP_Intraday'].fillna(0, inplace=True)
        
        CP_Intraday: pd.DataFrame = pd.pivot_table(
            self.data.reset_index(),
            index='trade_dt',
            columns='code',
            values='CP_Intraday'
            )
        return CP_Intraday
    
    @lru_cache
    def _get_monthly_CP(self) -> pd.DataFrame:
        """计算CP
        Returns:
        --------------
        pd.DataFrame
            index-date columns-code value-factor
        """
        _CP_Intraday = self._get_CP_intraday_()
        _CP_Intraday_mean: pd.DataFrame = _CP_Intraday.rolling(20).mean()
        _CP_Intraday_std: pd.DataFrame = _CP_Intraday.rolling(20).std()
        
        _CP_Intraday_mean.index = pd.to_datetime( _CP_Intraday_mean.index, format='%Y%m%d')
        _CP_Intraday_std.index = pd.to_datetime( _CP_Intraday_std.index, format='%Y%m%d')
            
        _CP_Intraday_mean: pd.DataFrame = _CP_Intraday_mean.resample('M').last()
        _CP_Intraday_std: pd.DataFrame = _CP_Intraday_std.resample('M').last()
            
        Market_Value: pd.DataFrame = pd.pivot_table(
            self.data.reset_index(),
            index='trade_dt',
            columns='code',
            values='market_value'
        )
        
        Market_Value.index = pd.to_datetime(Market_Value.index, format='%Y%m%d')
        Market_Value: pd.DataFrame = Market_Value.resample('M').last()
        CP_mean = _CP_Intraday_mean.apply(lambda x:calc_ols(Market_Value[x.name], x), axis=0)
        CP_std = _CP_Intraday_std.apply(lambda x:calc_ols(Market_Value[x.name], x), axis=0)

        CP_mean_rank = CP_mean.rank(na_option='keep')
        CP_std_rank = CP_std.rank(na_option='keep', ascending=False)
        
        CP = CP_mean_rank + CP_std_rank
        return CP

class RCP_factor(CP_factor):
    def __init__(self, data):
        super().__init__(data)
        
    def cal_RCP_Intraday(self) -> Union[pd.Series, pd.DataFrame]:
        """计算CP_Intraday
        
        每个交易日，将 CP_Intraday 对当日日内收益率做横截面正交化处理,取残差
        Returns
        --------
         Union[pd.Series,pd.DataFrame]
            index-date columns-code value-factor
        """
        _CP_intraday_ = self._get_CP_intraday_()
        close_shift = self.data.groupby(['code', 'trade_dt'])['close'].last().reset_index()
        close_shift['daily_return'] = (close_shift['close'] / close_shift['close'].shift() - 1).fillna(0)
        self.data = pd.merge(self.data, close_shift, on=['code', 'trade_dt'])
        self.data = self.data.reset_index()
        
        Returns_daily: pd.DataFrame = pd.pivot_table(
            self.data.reset_index(),
            index='trade_dt',
            columns='code',
            values='return')
        
        RCP_intraday = _CP_intraday_.apply(lambda x:Culling_factor(x, Returns_daily[x.name]))

        return RCP_intraday
    
    def cal_RCP(self) -> Union[pd.Series, pd.DataFrame]:
        """计算RCP
        Returns
        --------
         Union[pd.Series,pd.DataFrame]
            index-date columns-code value-factor
        """
        _RCP_Intraday = self.cal_RCP_Intraday()
        _RCP_Intraday_mean: pd.DataFrame = _RCP_Intraday.rolling(20).mean()
        _RCP_Intraday_std: pd.DataFrame = _RCP_Intraday.rolling(20).std()

        _RCP_Intraday_mean.index = pd.to_datetime(_RCP_Intraday_mean.index, format='%Y%m%d')
        _RCP_Intraday_std.index = pd.to_datetime(_RCP_Intraday_std.index, format='%Y%m%d')
            
        _RCP_Intraday_mean: pd.DataFrame = _RCP_Intraday_mean.resample('M').last()
        _RCP_Intraday_std: pd.DataFrame = _RCP_Intraday_std.resample('M').last()
        
        Market_Value: pd.DataFrame = pd.pivot_table(
            self.data.reset_index(),
            index='trade_dt',
            columns='code',
            values='market_value'
        )
        Market_Value.index = pd.to_datetime(Market_Value.index, format='%Y%m%d')
        Market_Value: pd.DataFrame = Market_Value.resample('M').last()
        
        RCP_mean = _RCP_Intraday_mean.apply(lambda x:calc_ols(Market_Value[x.name], x), axis=0)
        RCP_std = _RCP_Intraday_std.apply(lambda x:calc_ols(Market_Value[x.name], x), axis=0)
        
        RCP_mean_rank = RCP_mean.rank(na_option='keep')
        RCP_std_rank = RCP_std.rank(na_option='keep', ascending=False)
        
        RCP = RCP_mean_rank + RCP_std_rank
        
        return RCP

stock_data = read_multiple_csv('', 'csv')
cp_factor = CP_factor(stock_data)
rcp_factor = RCP_factor(stock_data)
cp_factor._cal_daily_stats_()
cp_factor._get_CP_intraday_()
cp_factor._get_monthly_CP()
#rcp_factor.cal_RCP_Intraday()
factor_res = rcp_factor.cal_RCP()
factor_res.to_csv("")
